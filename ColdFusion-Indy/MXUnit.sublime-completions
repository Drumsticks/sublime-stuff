{
    "scope": "source.cfscript,source.mxunit",
    "completions":
    [
        { "trigger": "assert()", "contents": "assert(${10:expression}${15:, \"${20:why?}\"})"},
        { "trigger": "debug()", "contents": "debug(${10:stuff})"},
        { "trigger": "assertTrue()", "contents": "assertTrue(${10:expression}${15:, \"${20:why?}\"})"},
        { "trigger": "assertFalse()", "contents": "assertFalse(${10:expression}${15:, \"${20:why?}\"})"},
        { "trigger": "assertEquals()", "contents": "assertEquals(${10:expected}, ${20:actual}${25:, \"${30:why?}\"})"},
        { "trigger": "assertNotEquals()", "contents": "assertNotEquals(${10:expected}, ${20:actual}${25:, \"${30:why?}\"})"},
        { "trigger": "fail()", "contents": "fail(${10:message})"},
        { "trigger": "failNotEquals()", "contents": "failNotEquals(${10:expected}, ${20:actual}${25:, \"${30:why?}\"})"},
        { "trigger": "assertSame()", "contents": "assertSame(${10:obj}, ${20:obj}${25:, \"${30:why?}\"})"},
        { "trigger": "assertNotSame()", "contents": "assertNotSame(${10:obj}, ${20:obj}${25:, \"${30:why?}\"})"},
        { "trigger": "assertXPath()", "contents": "assertXPath*( ${10:xpath}, ${20:data}, ${3:text}, ${4:message})"},
        { "trigger": "assertIsXMLDoc()", "contents": "assertIsXMLDoc(${10:xml}${25:, \"${30:why?}\"})"},
        { "trigger": "assertIsTypeOf()", "contents": "assertIsTypeOf(${10:component}, ${20:type}${25:, \"${30:why?}\"})"},
        { "trigger": "assertIsArray()", "contents": "assertIsArray(${10:array}${15:, \"${20:why?}\"})"},
        { "trigger": "assertIsDefined()", "contents": "assertIsDefined(${10:variable}${15:, \"${20:why?}\"})"},
        { "trigger": "assertIsEmpty()", "contents": "assertIsEmpty(${10:collection}${15:, \"${20:why?}\"})"},
        { "trigger": "assertIsEmptyArray()", "contents": "assertIsEmptyArray(${10:array}${15:, \"${20:why?}\"})"},
        { "trigger": "assertIsEmptyQuery()", "contents": "assertIsEmptyQuery(${10:query}${15:, \"${20:why?}\"})"},
        { "trigger": "assertIsEmptyStruct()", "contents": "assertIsEmptyStruct(${10:struct}${15:, \"${20:why?}\"})"},
        { "trigger": "assertIsQuery()", "contents": "assertIsQuery(${10:query}${15:, \"${20:why?}\"})"},
        { "trigger": "assertIsStruct()", "contents": "assertIsStruct(${10:struct}${15:, \"${20:why?}\"})"},
        { "trigger": "setUp()", "contents": "function setUp(){\n  ${10:code}; \n}"},
        { "trigger": "tearDown()", "contents": "function tearDown(){\n  ${10:code}; \n}"},
        { "trigger": "beforeTests()", "contents": "function beforeTests(){\n  ${10:code}; \n}"},
        { "trigger": "afterTests()", "contents": "function afterTests(){\n  ${10:code}; \n}"},
        { "trigger": "makePublic()", "contents": "makePublic( ${10:component}, ${20:private method}, ${3:proxy} )"},
        { "trigger": "injectMethod()", "contents": "injectMethod( ${10:receiver}, ${20:giver}, ${3:function_name}, ${4:function_name_in_receiver} )"},
        { "trigger": "injectProperty()", "contents": "injectProperty( ${10:component}, ${20:variable name}, ${3:new value}, ${4:scope} )"},
        { "trigger": "mock()", "contents": "mock(${10:component},${20:typeSage})"},
        { "trigger": "returns()", "contents": "returns(${10:value})"},
        { "trigger": "throws()", "contents": "throws(${10:exeption})"},
        { "trigger": "verify()", "contents": "verify()"},
        { "trigger": "verifyTimes()", "contents": "verifyTimes(${10:number})"},
        { "trigger": "verifyAtLeast()", "contents": "verifyAtLeast(${10:number})"},
        { "trigger": "verifyAtMost()", "contents": "verifyAtMost(${10:number})"},
        { "trigger": "verifyOnce()", "contents": "verifyOnce()"},
        { "trigger": "verifyNever()", "contents": "verifyNever()"},
        { "trigger": "orderedExpectation()", "contents": "orderedExpectation( ${10:one_of_N_object_params})"},
        { "trigger": "@mxunit:expectedException", "contents": "@mxunit:expectedException ${10:exception(s)}"},
        { "trigger": "@mxunit:dataProvider", "contents": "@mxunit:dataProvider ${10:collection_name}"},
        { "trigger": "expectException()", "contents": "expectException(${10:exception_name})"}
  ]
}